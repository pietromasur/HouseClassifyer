# -*- coding: utf-8 -*-
"""HouseClassifyer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TZK3uPFUQbmIjG2lOkv9miLXa33Kx58w
"""

#tipos de casas:
#castelo - castle
#iglu - igloo
#cabana - hut
#house tree - casa na Ã¡rvore

#hide
!pip install -Uqq fastbook
import fastbook
fastbook.setup_book()

#hide
from fastbook import *
from fastai.vision.widgets import *
from fastai.vision import *
from fastai.metrics import error_rate
from IPython.display import Image
from pathlib import Path

key = os.environ.get('AZURE_SEARCH_KEY', 'e6c303f4168e494b81536613658455fc')

results = search_images_bing(key, 'castle')
imsCastle = results.attrgot('content_url')
len(imsCastle)

ims = ['https://th.bing.com/th/id/OIP.I7TADkd5wEI1vTOLuZe0qQHaEo?pid=ImgDet&rs=1']

# import os
# ##os.mkdir('images_castle')
# dest = 'images_castle/castle.jpg'
# download_url(ims[0], dest)

# im = Image.open(dest)
# im.to_thumb(128,128)

house_types = 'castle','igloo','hut', 'house tree'
path = Path('houses')

if not path.exists():
    path.mkdir()
    for o in house_types:
        dest = (path/o)
        dest.mkdir(exist_ok=True)
        results = search_images_bing(key, f'{o}')
        download_images(dest, urls=results.attrgot('contentUrl'))

from fastai.vision.all import *
fns = get_image_files(path)
fns

failed = verify_images(fns)
failed

failed.map(Path.unlink);

houses = DataBlock(
    blocks=(ImageBlock, CategoryBlock), 
    get_items=get_image_files, 
    splitter=RandomSplitter(valid_pct=0.2, seed=42),
    get_y=parent_label,
    item_tfms=Resize(128))

dls = houses.dataloaders(path)

dls.valid.show_batch(max_n=4, nrows=1)

houses = houses.new(item_tfms=Resize(128), batch_tfms=aug_transforms(mult=2))
dls = houses.dataloaders(path)
dls.train.show_batch(max_n=8, nrows=2, unique=True)

houses = houses.new(
    item_tfms=RandomResizedCrop(224, min_scale=0.5),
    batch_tfms=aug_transforms())
dls = houses.dataloaders(path)

learn = cnn_learner(dls, resnet18, metrics=error_rate)
learn.fine_tune(4)

interp = ClassificationInterpretation.from_learner(learn)
interp.plot_confusion_matrix()

interp.plot_top_losses(5, nrows=1)

learn.export()

path = Path()
path.ls(file_exts='.pkl')

learn_inf = load_learner(path/'export.pkl')

learn_inf.predict('houses/igloo/00000130.jpg')

learn_inf.dls.vocab

btn_upload = widgets.FileUpload()
btn_upload

img = PILImage.create(btn_upload.data[-1])

out_pl = widgets.Output()
out_pl.clear_output()
with out_pl: display(img.to_thumb(128,128))
out_pl

pred,pred_idx,probs = learn_inf.predict(img)

lbl_pred = widgets.Label()
lbl_pred.value = f'Prediction: {pred}; Probability: {probs[pred_idx]:.04f}'
lbl_pred

btn_run = widgets.Button(description='Classify')
btn_run

def on_click_classify(change):
    img = PILImage.create(btn_upload.data[-1])
    out_pl.clear_output()
    with out_pl: display(img.to_thumb(128,128))
    pred,pred_idx,probs = learn_inf.predict(img)
    lbl_pred.value = f'Prediction: {pred}; Probability: {probs[pred_idx]:.04f}'

btn_run.on_click(on_click_classify)

btn_upload = widgets.FileUpload()

VBox([widgets.Label('Select your habitat!'), 
      btn_upload, btn_run, out_pl, lbl_pred])

!pip install voila
!jupyter serverextension enable --sys-prefix voila

